<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:gfe="http://www.springframework.org/schema/gemfire"
        xmlns:cache="http://www.springframework.org/schema/cache"
        xmlns:int-mail="http://www.springframework.org/schema/integration/mail"
        xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
        xmlns:integration="http://www.springframework.org/schema/integration"
        xmlns:util="http://www.springframework.org/schema/util"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:security="http://www.springframework.org/schema/security"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire-1.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.4.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
		http://www.springframework.org/schema/integration/mail http://www.springframework.org/schema/integration/mail/spring-integration-mail-2.0.xsd
		http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.0.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
     ">


    <context:annotation-config/>

    <bean class="org.springframework.samples.travel.config.services.IntegrationConfiguration"/>
    <bean class="org.springframework.samples.travel.config.services.ServicesConfiguration"/>


    <context:property-placeholder location="classpath:/ds.standalone.properties"/>




    <!-- GEMFIRE-->
    <gfe:cache properties-ref="props" id="c"/>
    <gfe:replicated-region id="usersRegion" cache-ref="c"/>
    <gfe:replicated-region id="hotelsRegion" cache-ref="c"/>
    <gfe:replicated-region id="bookingsRegion" cache-ref="c"/>
    <util:properties id="props" location="classpath:/gfe-cache.properties"/>

    <cache:annotation-driven cache-manager="gemfireCacheManager"/>


<!--

    <security:http>
        <security:form-login login-page="/users/login" login-processing-url="/users/login/authenticate" default-target-url="/hotels" authentication-failure-url="/users/login?login_error=1"/>
        <security:logout logout-url="/users/logout" logout-success-url="/users/logoutSuccess"/>
    </security:http>

    &lt;!&ndash;
              Define local authentication provider, a real app would use an external provider (JDBC, LDAP, CAS, etc): see import.sql for the nitty gritty DDL

              usernames/passwords are in the database TRAVEL.CUSTOMERS, with MD5 encoded passwords.
                  keith/melbourne
                  erwin/leuven
                  jeremy/atlanta
                  scott/rochester
                  josh/la
          &ndash;&gt;



    <security:authentication-manager>
        <security:authentication-provider>
            <security:password-encoder hash="md5"/>
            <security:jdbc-user-service data-source-ref="dataSource"/>
        </security:authentication-provider>
    </security:authentication-manager>-->



    <integration:channel id="enqueuedEmails"/>
    <integration:channel id="dequeuedEmails"/>
    <integration:channel id="preparedEmails"/>

    <integration:gateway service-interface="org.springframework.samples.travel.services.integration.NotificationGateway" default-request-channel="enqueuedEmails"/>

    <int-amqp:outbound-channel-adapter channel="enqueuedEmails" exchange-name="${amqp.notification.exchange}" routing-key="${amqp.notification.exchange}" amqp-template="rabbitTemplate"/>

    <int-amqp:inbound-channel-adapter channel="dequeuedEmails" queue-names="${amqp.notification.queue}" message-converter="jsonMessageConverter" connection-factory="connectionFactory"/>

    <int-mail:header-enricher input-channel="dequeuedEmails" output-channel="preparedEmails">
        <int-mail:from value="${notifications.email.from}"/>
    </int-mail:header-enricher>

    <integration:service-activator input-channel="preparedEmails" ref="emailNotificationService" method="sendEmail"/>

</beans>
